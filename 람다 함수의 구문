람다 함수는 작고 익명의 함수입니다. 람다 함수는 임의의 개수의 인수를 사용할 수 있지만 하나의 표현식만 가질 수 있습니다.

람다 함수의 구문은 다음과 같습니다:

```python
lambda 인수들 : 표현식
```

표현식이 실행되고 결과가 반환됩니다.

예를 들어, 인수 `a`에 10을 더하고 결과를 반환하는 람다 함수를 만들어 보겠습니다:

```python
x = lambda a: a + 10
print(x(5))  # 출력 결과: 15
```

이제 람다 함수는 인수 `a`와 `b`를 곱하고 결과를 반환하는 예제를 살펴보겠습니다:

```python
x = lambda a, b: a * b
print(x(5, 6))  # 출력 결과: 30
```

또한 세 개의 인수 `a`, `b`, `c`를 합산하고 결과를 반환하는 람다 함수를 만들어 보겠습니다:

```python
x = lambda a, b, c: a + b + c
print(x(5, 6, 2))  # 출력 결과: 13
```

람다 함수의 또 다른 용도는 다른 함수 내에서 익명 함수로 사용하는 것입니다. 이를 통해 함수 내에서 동적으로 함수를 생성할 수 있습니다. 예를 들어, 다음은 입력된 인자를 곱하는 함수를 반환하는 함수를 만드는 예제입니다:

```python
def myfunc(n):
  return lambda a: a * n

mydoubler = myfunc(2)
print(mydoubler(11))  # 출력 결과: 22

mytripler = myfunc(3)
print(mytripler(11))  # 출력 결과: 33
```

이처럼 동일한 함수 정의를 사용하여 다른 값을 전달하여 서로 다른 기능을 하는 두 개의 함수를 생성할 수 있습니다.

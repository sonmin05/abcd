JSON(JavaScript Object Notation)은 데이터를 교환하는 데 사용되는 경량의 데이터 형식입니다. Python에서는 이러한 JSON 데이터를 다루기 위해 내장된 json 패키지를 제공합니다.

JSON을 파싱하거나 파이썬 객체를 JSON으로 변환하는 데 사용되는 주요 메소드는 다음과 같습니다.

1. **json.loads()**: JSON 문자열을 파싱하여 파이썬 객체로 변환합니다.
2. **json.dumps()**: 파이썬 객체를 JSON 문자열로 변환합니다.

예를 통해 살펴보겠습니다.

```python
import json

# JSON 문자열을 파이썬 객체로 변환
json_str = '{ "name":"John", "age":30, "city":"New York"}'
python_obj = json.loads(json_str)
print(python_obj["age"])  # 출력 결과: 30

# 파이썬 객체를 JSON 문자열로 변환
python_obj = {
  "name": "John",
  "age": 30,
  "city": "New York"
}
json_str = json.dumps(python_obj)
print(json_str)  # 출력 결과: {"name": "John", "age": 30, "city": "New York"}
```

또한, 파이썬의 다양한 데이터 유형을 JSON 문자열로 변환할 수 있습니다. 예를 들어, 사전(dict), 리스트(list), 튜플(tuple), 문자열(str), 정수(int), 부동소수점(float), 불린(True, False), None 등이 있습니다.

```python
print(json.dumps({"name": "John", "age": 30}))        # dict
print(json.dumps(["apple", "bananas"]))               # list
print(json.dumps(("apple", "bananas")))               # tuple
print(json.dumps("hello"))                            # str
print(json.dumps(42))                                 # int
print(json.dumps(31.76))                              # float
print(json.dumps(True))                               # True
print(json.dumps(False))                              # False
print(json.dumps(None))                               # None
```

JSON 문자열을 보기 쉽게 출력하기 위해 `json.dumps()` 메소드는 들여쓰기(indent), 구분자(separators), 키 정렬(sort_keys)과 같은 매개변수를 제공합니다. 이러한 매개변수를 활용하여 결과를 원하는 형식으로 서식화할 수 있습니다.

파이썬 이터레이터
이터레이터(iterator)는 카운트 가능한 값들을 포함하는 객체입니다.

이터레이터는 반복 가능한(iterable) 객체로, 모든 값을 순회할 수 있습니다.

기술적으로, 파이썬에서 이터레이터는 __iter__()와 __next__() 메서드를 구현한 객체입니다.

**이터레이터 vs 반복 가능한 객체**
리스트, 튜플, 딕셔너리, 셋 등은 모두 반복 가능한 객체입니다. 이러한 객체들은 이터레이터를 얻을 수 있는 반복 가능한 컨테이너입니다.

모든 이 객체들은 iter() 메서드를 가지고 있으며, 이 메서드는 이터레이터를 반환합니다.

```python
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))
```

**이터레이터를 통한 루핑**
우리는 또한 for 루프를 사용하여 반복 가능한 객체를 순회할 수 있습니다.

```python
mytuple = ("apple", "banana", "cherry")

for x in mytuple:
  print(x)
```

**이터레이터 생성**
이터레이터를 생성하려면 객체/클래스에 __iter__()와 __next__() 메서드를 구현해야 합니다.

파이썬 클래스/객체 챕터에서 배운 것처럼, 모든 클래스에는 객체가 생성될 때 어떤 초기화 작업을 수행할 수 있는 __init__() 함수가 있습니다.

__iter__() 메서드는 유사하게 동작합니다. 작업(초기화 등)을 수행할 수 있지만 항상 이터레이터 객체 자체를 반환해야 합니다.

__next__() 메서드는 작업을 수행하고 시퀀스의 다음 항목을 반환해야 합니다.

```python
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
```

**StopIteration**
위의 예제는 충분한 next() 문이 있다면 영원히 계속됩니다. 또는 for 루프에서 사용된다면 영원히 계속될 것입니다.

무한 반복을 방지하기 위해 StopIteration 문을 사용할 수 있습니다.

__next__() 메서드에서 지정된 횟수만큼 반복을 완료하면 에러를 발생시킬 수 있습니다.

```python
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
```

이것이 파이썬 이터레이터에 대한 개요와 예시입니다.
